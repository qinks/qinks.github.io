<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[CentOS7终端静默安装Oracle11gR2]]></title>
    <url>%2F2019%2F03%2F25%2FCentOS7%E7%BB%88%E7%AB%AF%E9%9D%99%E9%BB%98%E5%AE%89%E8%A3%85Oracle11gR2%2F</url>
    <content type="text"><![CDATA[1.环境准备安装包：linux.x64_11gR2_database_1of2.ziplinux.x64_11gR2_database_2of2.zip 下载地址：http://download.oracle.com/otn/linux/oracle11g/R2/linux.x64_11gR2_database_1of2.ziphttp://download.oracle.com/otn/linux/oracle11g/R2/linux.x64_11gR2_database_2of2.zip 2.环境配置2.1配置交换分区2.1.1查看交换分区大小123[root@datanode1 ~]# swapon -sFilename Type Size Used Priority/dev/dm-1 partition 12517372 0 -1 2.1.2查看内存大小12[root@datanode1 ~]# grep MemTotal /proc/meminfoMemTotal: 18315208 kB 2.1.3增加交换分区（关键） Available RAM Swap Space Required Between 1 GB and 2 GB 1.5 times the size of the RAM Between 2 GB and 16 GB Equal to the size of the RAM More than 16 GB 16 GB 那么在我当前的环境下，交换空间至少要达到16GB。 2.1.3.1确定要添加的交换分区大小按照Oracle要求来即可，这里定的目标是超过内存大小。18315208-12517372=5797836，所以补充6000000KB交换空间。 2.1.3.2添加交换文件1234[root@datanode1 swaps]# dd if=/dev/zero of=/home/swaps/swapfile bs=1024 count=6000000 6000000+0 records in6000000+0 records out6144000000 bytes (6.1 GB) copied, 174.731 s, 35.2 MB/s 2.1.3.3格式化为交换文件系统123[root@datanode1 swaps]# mkswap /home/swaps/swapfileSetting up swapspace version 1, size = 5999996 KiBno label, UUID=0ba4a9f6-c14f-49d4-a926-c0f490353b15 2.1.3.4启用交换文件12[root@datanode1 swaps]# swapon /home/swaps/swapfileswapon: /home/swaps/swapfile: insecure permissions 0644, 0600 suggested. 2.1.3.5查看效果1234[root@datanode1 swaps]# swapon -sFilename Type Size Used Priority/dev/dm-1 partition 12517372 0 -1/home/swaps/swapfile file 5999996 0 -2 2.1.3.6使交换分区在引导时启用12345678910111213[root@datanode1 swaps]# vi /etc/fstab## /etc/fstab# Created by anaconda on Mon Mar 19 16:39:39 2018## Accessible filesystems, by reference, are maintained under &apos;/dev/disk&apos;# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info#/dev/mapper/cl-root / xfs defaults 0 0UUID=6ff20dbe-4789-4936-adcc-857215605628 /boot xfs defaults 0 0/dev/mapper/cl-home /home xfs defaults 0 0/dev/mapper/cl-swap swap swap defaults 0 0/home/swaps/swapfile swap swap defaults 0 0 2.2系统环境2.2.1关闭selinux服务1# sed -i &apos;/^SELINUX=/cSELINUX=disabled&apos; /etc/selinux/config 2.2.2关闭防火墙12# systemctl disable firewalld.service# systemctl stop firewalld.service 2.2.3禁用 NetworkManager12# systemctl disable NetworkManager# systemctl stop NetworkManager.service 2.2.4本机解析1# echo &quot;172.160.20.129 oracle&quot; &gt;&gt; /etc/hosts 2.3依赖包2.3.1工具12345# yum install epel-release -y# yum clean all# yum repolist# yum makecache fast -y# yum install vim unzip rlwrap -y 2.3.2安装 oracle 需要的包1# yum install binutils compat-libcap1 compat-libstdc++-33 compat-libstdc++-33*i686 gcc gcc-c++ glibc glibc*.i686 glibc-devel glibc-devel*.i686 ksh libaio libaio*.i686 libaio-devel libgcc libgcc*.i686 libstdc++ libstdc++*.i686 libstdc++-devel libXi libXi*.i686 libXtst libXtst*.i686 make sysstat unixODBC unixODBC*.i686 unixODBC-devel unixODBC-devel*.i686 -y 2.4配置安装环境2.4.1创建 oracle 用户123# groupadd oinstall# groupadd dba# useradd -g oinstall -G dba oracle 2.4.2创建 oracle 安装目录123456# mkdir -p /opt/oracle/app/product/11.2.0# mkdir -p /opt/oracle/app/oradata# mkdir -p /opt/oracle/app/fast_recovery_area# mkdir -p /opt/oracle/inventory# chown -R oracle:oinstall /opt/oracle# chmod -R 775 /opt/oracle 2.4.3修改 sysctl.conf1234567891011121314151617# cat &lt;&lt; EOF &gt;&gt; /etc/sysctl.conf&gt; fs.aio-max-nr = 1048576&gt; fs.file-max = 6815744&gt; #物理内存一半和4G中的较大者&gt; #kernel.shmmax = 4294967296&gt; #shmmax / 4k (getconf PAGESIZE)&gt; #kernel.shmall = 1048576&gt; kernel.shmmni = 4096&gt; kernel.sem = 250 32000 200 200&gt; net.ipv4.ip_local_port_range = 9000 65500&gt; net.core.rmem_default = 262144&gt; net.core.wmem_default = 262144&gt; net.core.wmem_max = 1048586&gt; net.core.rmem_max = 4194304&gt; EOF# sysctl -p 2.4.4修改 limits.conf123456# cat &lt;&lt; EOF &gt;&gt; /etc/security/limits.conf&gt; oracle soft nproc 2047&gt; oracle hard nproc 16384&gt; oracle soft nofile 1024&gt; oracle hard nofile 65536&gt; EOF 2.4.5修改 login1234# cat &lt;&lt; EOF &gt;&gt; /etc/pam.d/login&gt; session required /lib64/security/pam_limits.so&gt; session required pam_limits.so&gt; EOF 2.4.6修改 profile1234567891011# cat &lt;&lt; EOF &gt;&gt; /etc/profile&gt; if [ \$USER = &quot;oracle&quot; ] ; then&gt; if [ \$SHELL = &quot;/bin/ksh&quot; ]; then&gt; ulimit -p 16384&gt; ulimit -n 65536&gt; else&gt; ulimit -u 16384 -n 65536&gt; fi&gt; umask 022&gt; fi&gt; EOF 2.4.7修改 oracle 用户的 .bash_profile12345678# cat &lt;&lt; EOF &gt;&gt; /home/oracle/.bash_profile&gt; export ORACLE_BASE=/opt/oracle/app&gt; export ORACLE_HOME=\$ORACLE_BASE/product/11.2.0&gt; export ORACLE_SID=orcl&gt; export PATH=\$PATH:\$ORACLE_HOME/bin&gt; #export NLS_LANG=&quot;SIMPLIFIED CHINESE_CHINA.AL32UTF8&quot;&gt; #export NLS_LANG=&quot;SIMPLIFIED CHINESE_CHINA.ZHS16GBK&quot;&gt; EOF 3.安装数据库3.1解压文件123# unzip linux.x64_11gR2_database_1of2.zip -d /home/oracle/# unzip linux.x64_11gR2_database_2of2.zip -d /home/oracle/# chown -R oracle.oinstall /home/oracle/database 3.2切换到 oracle 用户，后续操作都在该 oracle 用户下执行1# su - oracle 3.3创建respon文件1$ cp database/response/*.rsp ./ 3.4修改 db_install.rsp1234567891011# sed -i &apos;/^oracle.install.option=/s#=.*$#=INSTALL_DB_SWONLY#&apos; /home/oracle/db_install.rsp# sed -i &apos;/^UNIX_GROUP_NAME=/s#=.*$#=oinstall#&apos; /home/oracle/db_install.rsp# sed -i &apos;/^INVENTORY_LOCATION=/s#=.*$#=/opt/oracle/inventory#&apos; /home/oracle/db_install.rsp# sed -i &apos;/^SELECTED_LANGUAGES=/s#=.*$#=en,zh_CN#&apos; /home/oracle/db_install.rsp# sed -i &apos;/^ORACLE_HOME=/s#=.*$#=/opt/oracle/app/product/11.2.0#&apos; /home/oracle/db_install.rsp# sed -i &apos;/^ORACLE_BASE=/s#=.*$#=/opt/oracle/app#&apos; /home/oracle/db_install.rsp# sed -i &apos;/^oracle.install.db.InstallEdition=/s#=.*$#=EE#&apos; /home/oracle/db_install.rsp# sed -i &apos;/^oracle.install.db.DBA_GROUP=/s#=.*$#=dba#&apos; /home/oracle/db_install.rsp# sed -i &apos;/^oracle.install.db.OPER_GROUP=/s#=.*$#=dba#&apos; /home/oracle/db_install.rsp# sed -i &apos;/^oracle.install.db.config.starterdb.type=/s#=.*$#=GENERAL_PURPOSE#&apos; /home/oracle/db_install.rsp# sed -i &apos;/^DECLINE_SECURITY_UPDATES=/s#=.*$#=true#&apos; /home/oracle/db_install.rsp 3.5修改 dbca.rsp12345# sed -i &apos;/^GDBNAME =/s#=.*$#= &quot;orcl&quot;#&apos; /home/oracle/dbca.rsp# sed -i &apos;/^SID =/s#=.*$#= &quot;orcl&quot;#&apos; /home/oracle/dbca.rsp# sed -i &apos;/^#SYSPASSWORD =/s#=.*$#= &quot;123456&quot;#&apos; /home/oracle/dbca.rsp &amp;&amp; sed -i &apos;/^#SYSPASSWORD/s/^#//&apos; /home/oracle/dbca.rsp# sed -i &apos;/^#SYSTEMPASSWORD =/s#=.*$#= &quot;123456&quot;#&apos; /home/oracle/dbca.rsp &amp;&amp; sed -i &apos;/^#SYSTEMPASSWORD/s/^#//&apos; /home/oracle/dbca.rsp# sed -i &apos;/^#CHARACTERSET =/s#=.*$#= &quot;AL32UTF8&quot;#&apos; /home/oracle/dbca.rsp &amp;&amp; sed -i &apos;/^#CHARACTERSET/s/^#//&apos; /home/oracle/dbca.rsp 3.6安装 oracle 软件12$ cd /home/oracle/database/$ ./runInstaller -silent -responseFile /home/oracle/db_install.rsp -ignorePrereq 安装成功提示如下： /opt/oracle/inventory/logs/installActions2019-03-25_10-20-07AM.logOracle Database 11g 的 安装 已成功。请查看 ‘/opt/oracle/inventory/logs/silentInstall2019-03-25_10-20-07AM.log’ 以获取详细资料。以 root 用户的身份执行以下脚本: 1. /opt/oracle/inventory/orainstRoot.sh 2. /opt/oracle/app/product/11.2.0/root.sh Successfully Setup Software. 3.7切换至root下执行脚本12# /opt/oracle/inventory/orainstRoot.sh# /opt/oracle/app/product/11.2.0/root.sh 3.8配置监听切换到oracle用户1$ netca /silent /responseFile /home/oracle/netca.rsp 提示如下： 正在对命令行参数进行语法分析:参数”silent” = true参数”responsefile” = /home/oracle/netca.rsp完成对命令行参数进行语法分析。Oracle Net Services 配置:完成概要文件配置。Oracle Net 监听程序启动: 正在运行监听程序控制: /opt/oracle/app/product/11.2.0/bin/lsnrctl start LISTENER 监听程序控制完成。 监听程序已成功启动。监听程序配置完成。成功完成 Oracle Net Services 配置。退出代码是0 启动1$ lsnrctl start 重启1$ lsnrctl reload 状态1$ lsnrctl status LSNRCTL for Linux: Version 11.2.0.4.0 - Production on 25-MAR-2019 11:15:58Copyright (c) 1991, 2013, Oracle. All rights reserved.Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521))) STATUS of the LISTENERAlias LISTENERVersion TNSLSNR for Linux: Version 11.2.0.4.0 - ProductionStart Date 25-MAR-2019 10:25:27Uptime 0 days 0 hr. 50 min. 30 secTrace Level offSecurity ON: Local OS AuthenticationSNMP OFFListener Parameter File /opt/oracle/app/product/11.2.0/network/admin/listener.oraListener Log File /opt/oracle/app/diag/tnslsnr/lab162/listener/alert/log.xmlListening Endpoints Summary… (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521))) (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=lab162.lab.com)(PORT=1521)))Services Summary…Service “orcl” has 1 instance(s). Instance “orcl”, status READY, has 1 handler(s) for this service…Service “orclXDB” has 1 instance(s). Instance “orcl”, status READY, has 1 handler(s) for this service…The command completed successfully 4.创建数据库1$ dbca -silent -responseFile /home/oracle/dbca.rsp 复制数据库文件1% 已完成3% 已完成11% 已完成18% 已完成26% 已完成37% 已完成正在创建并启动 Oracle 实例40% 已完成45% 已完成50% 已完成55% 已完成56% 已完成60% 已完成62% 已完成正在进行数据库创建66% 已完成70% 已完成73% 已完成85% 已完成96% 已完成100% 已完成 检查oracle状态：1$ lsnrctl status LSNRCTL for Linux: Version 11.2.0.4.0 - Production on 25-MAR-2019 11:19:47Copyright (c) 1991, 2013, Oracle. All rights reserved.Connecting to (DESCRIPTION=(ADDRESS=(PROTOCOL=IPC)(KEY=EXTPROC1521))) STATUS of the LISTENERAlias LISTENERVersion TNSLSNR for Linux: Version 11.2.0.4.0 - ProductionStart Date 25-MAR-2019 10:25:27Uptime 0 days 0 hr. 54 min. 19 secTrace Level offSecurity ON: Local OS AuthenticationSNMP OFFListener Parameter File /opt/oracle/app/product/11.2.0/network/admin/listener.oraListener Log File /opt/oracle/app/diag/tnslsnr/lab162/listener/alert/log.xmlListening Endpoints Summary… (DESCRIPTION=(ADDRESS=(PROTOCOL=ipc)(KEY=EXTPROC1521))) (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp)(HOST=lab162.lab.com)(PORT=1521)))Services Summary…Service “orcl” has 1 instance(s). Instance “orcl”, status READY, has 1 handler(s) for this service…Service “orclXDB” has 1 instance(s). Instance “orcl”, status READY, has 1 handler(s) for this service…The command completed successfully 5.登陆数据库输入sqlplus / as sysdba 后回车,以超级管理员身份登录,成功后下所示(可以看到是oracle 11g 64位的登录成功后显示版本信息,32位则不会)1$ sqlplus / as sysdba SQL*Plus: Release 11.2.0.4.0 Production on Mon Mar 25 11:30:25 2019Copyright (c) 1982, 2013, Oracle. All rights reserved.Connected to:Oracle Database 11g Enterprise Edition Release 11.2.0.4.0 - 64bit ProductionWith the Partitioning, OLAP, Data Mining and Real Application Testing options 进入sqlplus 启动实例startup SQL&gt; startupORA-01081: cannot start already-running ORACLE - shut it down first提示是实例已经起来了，无需再次启动。 可以shutdown后在startup SQL&gt; shutdownDatabase closed.Database dismounted.ORACLE instance shut down.SQL&gt; startupORACLE instance started. Total System Global Area 2455228416 bytesFixed Size 2255712 bytesVariable Size 620758176 bytesDatabase Buffers 1811939328 bytesRedo Buffers 20275200 bytesDatabase mounted.Database opened. 注：1.sys和system用户 (1)oracle会自动生成sys和system用户(2)sys 超级管理员、具有最高权限、具有sysdba 角色、具有create database的权限，默认的密码是change_on_install(3)system普通管理员、权限也很大 、具有sysoper角色、没有create database的权限，默认的密码是manager 2.一般来讲，对数据库维护，使用system用户登录就可以 3.sys和system这两个用户最大的区别是在于有没有create database的权限]]></content>
      <categories>
        <category>Oracle</category>
      </categories>
      <tags>
        <tag>Oracle</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[使用Lsyncd复制并实时同步到远程服务器]]></title>
    <url>%2F2019%2F02%2F18%2F%E4%BD%BF%E7%94%A8Lsyncd%E5%A4%8D%E5%88%B6%E5%B9%B6%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%88%B0%E8%BF%9C%E7%A8%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[1. 何为Lsyncd？Lsyncd 官网 https://axkibe.github.io/ Lsyncd监视本地目录树事件监视器接口(inotify或fsevents)。它聚合并将事件组合在一起几秒钟，然后生成一个(或多个)进程来同步这些更改。默认情况下，由rsync实现同步。因此，Lsyncd是一种轻量级的实时镜像解决方案，相对容易安装，不需要新的文件系统或块设备，也不会妨碍本地文件系统的性能。 Rsync+ssh是一种高级操作配置，它使用ssh来执行文件和目录直接在目标上移动，而不是在线路上重新传输移动目标。细粒度的定制可以通过配置文件实现。自定义动作configs甚至可以从头编写，从shell脚本到Lua语言编写的代码。这种方法简单，强大，灵活的配置可以被解决。 Lsyncd 2.2.2要求在所有源和目标机器上rsync &gt;= 3.1。 系统环境： RenwoleServer：10.28.204.65 服务端RenwoleClient：10.28.204.66 客户端OS：CentOS Linux release 7.4.1708 (Core) x64 2. rsync的安装 请参阅：《CentOS 7配置Rsync数据文件同步服务器》。 2.1 安装扩展依赖包1$ yum install -y gcc gcc-c++ lua lua-devel cmake libxml2 libxml2-devel 2.2 源代码编译安装lsyncd123456$ wget https://github.com/axkibe/lsyncd/archive/release-2.2.2.tar.gz$ tar xvf release-2.2.2.tar.gz$ cd lsyncd-release-2.2.2$ cmake -DCMAKE\_INSTALL\_PREFIX=/usr/local/lsyncd$ make &amp;&amp; make install$ ln -s /usr/local/lsyncd/bin/lsyncd /usr/bin/lsyncd 安装过程可能报错： -- Configuring incomplete, errors occurred! 安装lua-devel即可。 2.3 设置无密码SSH登录因为这里使用rsyncssh进行同步，所以还需要配置root账号无密码ssh登录。详细配置请参阅： 《如何在Linux中设置SSH无密码登录》 3. 配置lsyncd以下是三种常用配置案例 3.1 远程同步rsyncssh模式配置方案：1234567891011121314151617181920212223242526272829303132$ vim /etc/lsyncd.confsettings &#123; logfile = &quot;/var/log/lsyncd.log&quot;, --日志路径 statusFile = &quot;/var/log/lsyncd.status&quot;, --状态文件 pidfile = &quot;/var/run/lsyncd.pid&quot;, --pid文件路径 statusInterval = 1, --状态文件写入最短时间 nodaemon = false, --daemon运行 maxProcesses = 1, --最大进程 maxDelays = 1, --最大延迟&#125;sync &#123; default.rsyncssh, --默认rsync+ssh,rsync版本需要升级3以上版本 source = &quot;/apps/www/renwoleblog/&quot;, --源目录 delete = true, --保持完全同步 host = &quot;root@10.28.204.66&quot;, targetdir = &quot;/apps/www/renwoleblog/bak/&quot;, --目标目录 exclude=&#123; &quot;.txt&quot; --需排除的文件 &#125;,rsync = &#123; binary = &quot;/usr/bin/rsync&quot;, --需先安装好rsync archive = true, --归档 compress = false, --压缩 owner = true, --属主 perms = true, --权限 whole\_file = false &#125;,ssh = &#123; port = 22 &#125;&#125; 3.2 本地目录同步配置方案：12345sync &#123; default.rsync, source = &quot;/apps/www/renwoleblog/&quot;, target = &quot;/apps/www/renwoleblog/bak/&quot;,&#125; 3.3 远程同步rsync-daemon模式配置方案123456789101112131415161718sync &#123; default.rsync, source = &quot;/apps/www/renwoleblog/&quot;, target = &quot;renwole@10.28.204.65::renwolecom&quot;, delete=&quot;true&quot;, exclude = &#123; &quot;.bak\*&quot; &#125;, delay = 30, init = false, rsync = &#123; binary = &quot;/usr/bin/rsync&quot;, archive = true, compress = true, verbose = true, perms = true, password\_file = &quot;/etc/rsync.password&quot;, \_extra = &#123;&quot;--bwlimit=200&quot;&#125; &#125;&#125; 重点参数说明： -- # 注释符settings # 是全局配置sync # 定义同步参数rsync # 定义同步文件参数ssh # 定义服务器远程端口 lsyncd配置文件允许多个sync互不影响。 说明：如果是一对多，请参阅本地同步，修改目标目录即可。 4. 创建systemctl系统单元文件为了实现systemctl进行管理，请创建配置文件以及脚本启动文件，命令如下：1$ vim /etc/sysconfig/lsyncd 添加如下内容：1LSYNCD_OPTIONS=&quot;/etc/lsyncd.conf&quot; 创建启动文件：1$ vim /usr/lib/systemd/system/lsyncd.service 添加如下内容：1234567891011[Unit]Description=Live Syncing (Mirror) DaemonAfter=network.target[Service]Type=simpleEnvironmentFile=-/etc/sysconfig/lsyncdExecStart=/usr/local/lsyncd/bin/lsyncd -nodaemon $LSYNCD\_OPTIONS[Install]WantedBy=multi-user.target 7.启动lsyncd并加入开机自启动12$ systemctl start lsyncd$ systemctl enable lsyncd 接下来你就可以往源服务器/apps/www/renwoleblog/内上传任意文件，完成后立刻就会同步到客户端10.28.204.66`/apps/www/renwoleblog/bak/`目录内，也可以查看服务端的lsyncd日志文件分析是否同步成功。例如： [root@RenwoleServer ~] $ cat /var/log/lsyncd.log …Fri Dec 22 01:19:22 2017 Normal: Calling rsync with filter-list of new/modified files/dirs/PCHunter_renwole.com.tar.gz/Fri Dec 22 01:19:24 2017 Normal: Finished (list): 0Fri Dec 22 01:19:32 2017 Normal: Calling rsync with filter-list of new/modified files/dirs/PCHunter_renwole.com.tar.gz/Fri Dec 22 01:19:34 2017 Normal: Finished (list): 0Fri Dec 22 01:19:34 2017 Normal: Calling rsync with filter-list of new/modified files/dirs/PCHunter_renwole.com.tar.gz/Fri Dec 22 01:19:36 2017 Normal: Finished (list): 0 日志内容显示PCHunter_renwole.com.rar文件成功同步。 另外lsyncd是基于inotify+rsync的开源同步软件，相对于其他同步软件更加安全可靠，占用资源更少，但配置略麻烦。lsyncd还支持当监控到某个指定事件时就执行什么样的命令，由于是通过时间延迟和累计事件命中次数来触发同步，在设计上要优于inotify，另外他的同步速度完全取决于你的网络质量。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Lsyncd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux中使用mutt发送邮件]]></title>
    <url>%2F2019%2F01%2F29%2FLinux%E4%B8%AD%E4%BD%BF%E7%94%A8mutt%E5%8F%91%E9%80%81%E9%82%AE%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[1.Mutt是什么它是一款基于文字界面的邮件客户端,非常小巧,但功能强大,可以用它来读写,回复保存和删除你的邮件,能在linux命令行模式下收发邮件附件,更多的用法请查阅官网：http://www.mutt.org 2.Mutt安装与配置2.1安装1yum install mutt -y 2.2配置vim /etc/Muttrc 末尾添加12345678#如果你收到的邮件乱码，设置以下信息set charset=&quot;utf-8&quot;set rfc2047_parameters=yes#如果你想自定义发件人信息，需要进行如下设置set envelope_from=yesset use_from=yesset from=new_land_sh@126.comset realname=&quot;Newland_SH&quot; 3.邮件发送3.1语法 mutt [-hnpRvxz][-a&lt;文件&gt;][-b&lt;地址&gt;][-c&lt;地址&gt;][-f&lt;邮件文 件&gt;][-F&lt;配置文件&gt;][-H&lt;邮件草稿&gt;][-i&lt;文件&gt;][-m&lt;类型&gt;] [-s&lt;主题&gt;][邮件地址] 参 数： -a &lt;文件&gt; 在邮件中加上附加文件。 -b &lt;地址&gt; 指定密件副本的收信人地址。 -c &lt;地址&gt; 指定副本的收信人地址。 -f &lt;邮件文件&gt; 指定要载入的邮件文件。 -F &lt;配置文件&gt; 指定mutt程序的设置文件，而不读取预设的.muttrc文件。 -h 显示帮助。 -H &lt;邮件草稿&gt; 将指定的邮件草稿送出。 -i &lt;文件&gt; 将指定文件插入邮件内文中。 -m &lt;类型&gt; 指定预设的邮件信箱类型。 -n 不要去读取程序培植文件(/etc/Muttrc)。 -p 在mutt中编辑完邮件后，而不想将邮件立即送出，可将该邮件暂缓寄出。 -R 以只读的方式开启邮件文件。 -s &lt;主题&gt; 指定邮件的主题。 -v 显示mutt的版本信息以及当初编译此文件时所给予的参数。 -x 模拟mailx的编辑方式。 -z 与-f参数一并使用时，若邮件文件中没有邮件即不启动mutt。 3.2测试发送邮件 1mutt -s &quot;this is a test mail&quot; xxxxxxxxx@qq.com 4.利用shell脚本发送邮件首先vim mails.sh12345678910111213141516171819#!/bin/bash#定义日期变量date_time=`date +%Y%m%d`#从10.100.0.22拉取所需报表到本机scp -r root@10.100.0.22:/data/report/dailyopt/dailyopt&quot;$date_time&quot;.csv /root/dailyopt &gt;/dev/null 2&gt;&amp;1#发送带附件邮件到制定收件人if [ $? -eq 0 ]; then for i in `cat /root/mailp.txt`;do mutt -s &quot;$date_time优化数据&quot; $i -a /root/dailyopt/dailyopt&quot;$date_time&quot;.csv &lt; /root/mail.txt doneelse echo &quot;This email was not sent&quot; &gt;&gt; /root/dailyopt/error.logfi 其中：vim /root/mailp.txt 定义多个收件人123xxxxxxxxx@163.comxxxxxxxxx@qq.comxxxxxxxxx@126.com vim /root/mail.txt 定义邮件正文内容1请查收今日数据报表！ 最后crontab -e 添加计划任务定时执行10 2 * * * /bin/sh /root/mails.sh]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Mutt</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos下NFS使用与配置]]></title>
    <url>%2F2019%2F01%2F28%2FCentos7%E4%B8%8BNFS%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[NFS是Network File System的缩写，即网络文件系统。客户端通过挂载的方式将NFS服务器端共享的数据目录挂载到本地目录下。 1. NFS的工作流程12341、由程序在NFS客户端发起存取文件的请求，客户端本地的RPC(rpcbind)服务会通过网络向NFS服务端的RPC的111端口发出文件存取功能的请求。2、NFS服务端的RPC找到对应已注册的NFS端口，通知客户端RPC服务。3、客户端获取正确的端口，并与NFS daemon联机存取数据。4、存取数据成功后，返回前端访问程序，完成一次存取操作。 所以无论客户端 和服务端都需要用NFS，必须安装RPC服务。 NFS的RPC服务，在Centos5下名为portmap,Centos6下名称为rpcbind. 2. Centos7搭建NFS服务器实例 服务器系统 角色 IP CentOS7-150–server NFS服务器端 192.168.10.150 CentOS7-151-localhost NFS客户端 192.168.10.151 共享CentOS7-150–server中/data/bbs目录，使192.168.10.1 IP段所有主机都可以访问 2.1 因是测试环境，先关闭selinux和firewalld2.1.1 关闭selinux1[root@service ~]# sed -i s#SELINUX=enforcing#SELINUX=disabled#g /etc/selinux/config 2.1.2 关闭firewalld防火墙查看firewalld防火墙开机自动状态 12[root@service ~]# systemctl list-unit-files|grep enable|grep firewalldfirewalld.service enabled 关闭firewalld防火墙开机自动启 123[root@service ~]# systemctl disable firewalld.serviceRemoved symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service. 停止防火墙 1[root@service ~]# systemctl stop firewalld.service 查看防火墙状态 1234567891011121314[root@service ~]# systemctl status firewalld.service● firewalld.service - firewalld - dynamic firewall daemon Loaded: loaded (/usr/lib/systemd/system/firewalld.service; disabled; vendor preset: enabled) Active: inactive (dead) Docs: man:firewalld(1)Mar 14 18:52:24 localhost.localdomain systemd[1]: Starting firewalld - dynamic ....Mar 14 18:52:24 localhost.localdomain systemd[1]: Started firewalld - dynamic f....Mar 14 18:52:25 localhost.localdomain firewalld[573]: WARNING: ICMP type 'beyond...Mar 14 18:52:25 localhost.localdomain firewalld[573]: WARNING: beyond-scope: INV...Mar 14 18:52:25 localhost.localdomain firewalld[573]: WARNING: ICMP type 'failed...Mar 14 18:52:25 localhost.localdomain firewalld[573]: WARNING: failed-policy: IN...Mar 14 18:52:25 localhost.localdomain firewalld[573]: WARNING: ICMP type 'reject..Mar 14 18:52:25 localhost.localdomain firewalld[573]: WARNING: reject-route: INV...Mar 14 11:21:43 service systemd[1]: Stopping firewalld - dynamic firewall daemon...Mar 14 11:21:43 service systemd[1]: Stopped firewalld - dynamic firewall daemon.Hint: Some lines were ellipsized, use -l to show in full. 2.2 服务端部署2.2.1 检查系统版本及NFS服务nfs-utils 和rpcbind有没有安装123[root@service ~]# cat /etc/redhat-release CentOS Linux release 7.4.1708 (Core) [root@service ~]# rpm -qa nfs-utils rpcbind 2.2.2 安装NFS服务nfs-untils和rpcbind1[root@service ~]# yum install nfs-utils rpcbind -y 2.2.3 启动rpcbind服务（一定要先启动rpcbind服务再启动nfs服务)查看rpcbind服务状态 1[root@service ~]# systemctl status rpcbind.service 启动rpcbind服务 1[root@service ~]# systemctl start rpcbind.service 查看rpc 12345678910111213[root@service ~]# lsof -i :111COMMAND PID USER FD TYPE DEVICE SIZE/OFF NODE NAMEsystemd 1 root 33u IPv6 25136 0t0 TCP *:sunrpc (LISTEN)systemd 1 root 38u IPv4 25137 0t0 TCP *:sunrpc (LISTEN)rpcbind 9227 rpc 4u IPv6 25136 0t0 TCP *:sunrpc (LISTEN)rpcbind 9227 rpc 5u IPv4 25137 0t0 TCP *:sunrpc (LISTEN)rpcbind 9227 rpc 8u IPv4 33497 0t0 UDP *:sunrpc rpcbind 9227 rpc 10u IPv6 33499 0t0 UDP *:sunrpc [root@service ~]# netstat -lntup|grep rpcbindudp 0 0 0.0.0.0:922 0.0.0.0:* 9227/rpcbind udp 0 0 0.0.0.0:111 0.0.0.0:* 9227/rpcbind udp6 0 0 :::922 :::* 9227/rpcbind udp6 0 0 :::111 :::* 9227/rpcbind 查看nfs服务向rpc注册的端 口信息 12345678[root@service ~]# rpcinfo -p localhost program vers proto port service 100000 4 tcp 111 portmapper 100000 3 tcp 111 portmapper 100000 2 tcp 111 portmapper 100000 4 udp 111 portmapper 100000 3 udp 111 portmapper 100000 2 udp 111 portmapper 把rpcbind另入开机自启动 123[root@service ~]# systemctl enable rpcbind.service[root@service ~]# systemctl list-unit-files|grep enabled|grep rpcbindrpcbind.socket enabled 2.2.4 启动NFS服务并查看其状态12[root@service ~]# systemctl start nfs.service[root@service ~]# systemctl status nfs.service 把NFS服务加入开机自启动并查看其状态 12[root@service ~]# systemctl enable nfs.service[root@service ~]# systemctl list-unit-files|grep nfs 2.2.5 授权nfsnobody于/data/bbs让客户端挂载后可写可读1[root@service /]# chown nfsnobody:nfsnobody /data/bbs 2.2.6 创建测试目录及文件12[root@service ~]# mkdir /data/bbs -p[root@service ~]# mkdir /data/bbs/test.txt 2.2.7 配置NFS服务的export文件1[root@service ~]# echo "/data/bbs/ 192.168.10.1/24(rw,sync,root_squash)"&gt;&gt;/etc/exports 重新加载nfs配置文件 12[root@service ~]# exportfs -rvexporting 192.168.10.1/24:/data/bbs exportfs：NFS服务端发布共享控制命令。-r：表示重新刷新共享。-a：表示将配置文件/etc/exports中的所有定义共享发布出去。-v：显示确认共享设置。-u：表示不发布共享。 查看nfs服务器挂载情况 123[root@service ~]# showmount -e localhostExport list for localhost:/data/bbs 192.168.10.1/24 ro：目录只读 rw：目录读写 sync：将数据同步写入内存缓冲区与磁盘中，效率低，但可以保证数据的一致性 async：将数据先保存在内存缓冲区中，必要时才写入磁盘 all_squash：将远程访问的所有普通用户及所属组都映射为匿名用户或用户组(nfsnobody) no_all_squash：与all_squash取反(默认设置) root_squash：将root用户及所属组都映射为匿名用户或用户组(默认设置) no_root_squash：与rootsquash取反 anonuid=xxx：将远程访问的所有用户都映射为匿名用户，并指定该用户为本地用户(UID=xxx) anongid=xxx：将远程访问的所有用户组都映射为匿名用户组账户 2.3 客户端配置1[root@localhost ~]# yum install nfs-utils rpcbind 把rpcbind加入开机自启动 1[root@localhost bbs]# systemctl enable rpcbind.service 创建测试目录文件 1[root@localhost ~]# mkdir /data/bbs/ -p 扫描NFS服务器的文件共享列表 123[root@localhost bbs]# showmount -e 192.168.10.150Export list for 192.168.10.150:/data/bbs 192.168.10.1/24 把服务器的目录挂载到客户端 的目录下 1234567891011[root@localhost ~]# mount -t nfs -o noexec,nosuid,nodev,rw,rsize=65536,wsize=65536 192.168.10.150:/data/bbs /data/bbs[root@localhost ~]# df -hFilesystem Size Used Avail Use% Mounted on/dev/sda3 18G 1004M 17G 6% /devtmpfs 479M 0 479M 0% /devtmpfs 489M 0 489M 0% /dev/shmtmpfs 489M 6.8M 482M 2% /runtmpfs 489M 0 489M 0% /sys/fs/cgroup/dev/sda1 497M 112M 385M 23% /boottmpfs 98M 0 98M 0% /run/user/0192.168.10.150:/data/bbs 18G 1006M 17G 6% /data/bbs 3. 数据测试服务端 12[root@service /]# cd /data/bbs[root@service bbs]# touch a.txt 客户端 1[root@localhost ~]# ls /data/bbsa.txt 提示: 1.配置NFS服务端后，不用重启NFS服务，只要使用exportfs -rv 2.rpc主程序Centos5.8下为portmap 、Centos6.4和Centos7下为rpcbind 3.NFS共享目录不要授权于777权限，可以改所属主和组为nfsnobody，因为nfsnobody权限不是很大，也不能登陆 4. 配置客户端 开机自动挂载NFS共享目录12345678910111213[root@localhost ~]# chmod +x /etc/rc.d/rc.local #centos7需要给rc.local赋予执行权限后，rc.local文件才能生效[root@localhost ~]# echo "mount -t nfs -o noexec,nosuid,nodev,rw,rsize=65536,wsize=65536 192.168.10.150:/data/bbs /data/bbs"&gt;&gt;/etc/rc.local[root@localhost ~]# cat /etc/rc.local#!/bin/bash# THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES## It is highly advisable to create own systemd services or udev rules# to run scripts during boot instead of using this file.## In contrast to previous versions due to parallel execution during boot# this script will NOT be run after all other services.## Please note that you must run 'chmod +x /etc/rc.d/rc.local' to ensure# that this script will be executed during boot.mount -t nfs -o noexec,nosuid,nodev,rw,rsize=65536,wsize=65536 192.168.10.150:/data/bbs /data/bbs 5. 客户端mount挂载优化在企业生产环境中，NFS客户端挂载的参数有noexec、nosuid、nodev、noatime、rsize、wsize、nodiratime等， 一般来说，NFS服务器共享的只是普通静态数据（图片、附件、视频），不需要执行suid、exec等权限，挂载的这个文件系统只能作为数据存取之用，无法执行程序，对于客户端来讲增加了安全性，例如：很多木马修改站点文件都是由上传入口上传的程序存储目录，然后执行，因此在挂载时，用下面的命令是有必要的， 普遍安全挂载参数： mount -t nfs -o nosuid,noexec,nodev,rw 192.168.10.150:/data/bbs /data/bbs 挂载的读写缓存 wsize和rsize写和读缓存 wsize和rsize的最大值 NFSV2 rsize\=8192 wsize=8192 NFSV3 rsize\=32768 wsize=32768 NFSV4 rsize\=65536 wsize=65536 现在一般centos5.8以上的系统都己经增加了读写缓存，如需修改可以加以上参数 例如： mount -t nfs -o noexec,nosuid,nodev,rw,rsize=65536,wsize=65536 192.168.10.150:/data/bbs /data/bbs ★mount的一些常用挂载优化参数： wsize和rsize写和读缓存 async 数据不同步写到磁盘，提高性参，但降低数据安全，不推荐使用 noatime和nodiratime 这两个选是说在读写磁盘时，不更新文件和目录的时间戳，而更新文件时间戳对于工作数据必要性不大，增加了磁盘IO的次数，拖慢系统性参，defaults 这个缺省值包括rw,suid,dev,exec,auto,nouser,and async cat /etc/fstab的结果默认大部人都是缺省值 noauto 不会自动挂载文件系统 noexec 不允许安装的直接执行任何二进制文件 ro 挂载一个只读文件系统 rw 挂载一个可写的文件系统 sync 把数据同步写入硬盘 nosuid 不允许设置用户标识或设置组标识符位 nodev 不解释字符或文件块特殊设备 intr表示可以中断 ★企业生产环境中nfs性参优化挂载例子： 12mount -t nfs -o noatime,nodiratime 192.168.10.150:/data/bbs /data/bbsmount -t nfs -o nosuid,noexec,nodev,noatime,nodiratime,intr,rsize=65536,wsize=65536 192.168.10.150:/data/bbs /data/bbs 如果是本地系统： mount -o defaults,async,noatime,data=writeback,barrier=0 /dev/sdb1 /mnt data=writeback,barrier=0 是日志文件系统的优化 提示：本地文件系统挂载如果加nodiratime会报错， 6. 加优化参数和不加的数据写入测试★使用普通挂载 1[root@localhost ~]# mount -t nfs 192.168.10.150:/data/bbs /data/bbs 测试单个文件写入速度 12345678[root@localhost ~]# cd /data/bbs[root@localhost bbs]# time dd if=/dev/zero of=/data/bbs/dingjianfile bs=9k count=20002000+0 records in2000+0 records out18432000 bytes (18 MB) copied, 0.114592 s, 161 MB/sreal 0m0.125suser 0m0.000ssys 0m0.021s 测试批量创建文件的写入速度 1234[root@localhost bbs]# time for ((i=1;i&lt;10000;i++));do /bin/cp /bin/touch /data/bbs/test$i;donereal 2m2.877suser 0m10.242ssys 0m33.882s ★加优化参数挂载: 1[root@localhost bbs]#mount -t nfs -o noexec,nosuid,nodev,rw,rsize=65536,wsize=65536 192.168.10.150:/data/bbs /data/bbs 测试单个文件写入速度 1234567[root@localhost bbs]# time dd if=/dev/zero of=/data/bbs/dingjianfile bs=9k count=20002000+0 records in2000+0 records out18432000 bytes (18 MB) copied, 0.10043 s, 184 MB/sreal 0m0.107suser 0m0.001ssys 0m0.017s 测试批量创建文件的写入速度 1234[root@localhost bbs]# time for ((i=1;i&lt;10000;i++));do /bin/cp /bin/touch /data/bbs/test$i;donereal 1m38.526suser 0m9.989ssys 0m32.788s 7. 配置fstab文件令开机自动加载网络文件系统和本地的文件系统(和rc.local效果一样)12345678910[root@localhost bbs]# vi /etc/fstab## /etc/fstab# Created by anaconda on Fri Mar 9 05:05:49 2018## Accessible filesystems, by reference, are maintained under '/dev/disk'# See man pages fstab(5), findfs(8), mount(8) and/or blkid(8) for more info#UUID=07347aff-3d84-4cd6-a0e7-ac145593622e / xfs defaults 0 0UUID=f6cdb812-e3ba-4154-8116-a39c68f74d98 /boot xfs defaults 0 0UUID=8b003ed3-3e5b-4f45-9530-41a412748c6a swap swap defaults 0 0192.168.10.150:/data/bbs /data/bbs nfs defaults,nosuid,noatime,nodiratime,noexec,nodev,intr,rsize=65536,wsize=65536 0 0~]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>NFS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Lsyncd实时同步搭建指南]]></title>
    <url>%2F2019%2F01%2F28%2FLsyncd%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E6%90%AD%E5%BB%BA%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[1. 几大实时同步工具比较1.1 inotify + rsync最近一直在寻求生产服务服务器上的同步替代方案，原先使用的是inotify + rsync，但随着文件数量的增大到100W+，目录下的文件列表就达20M，在网络状况不佳或者限速的情况下，变更的文件可能10来个才几M，却因此要发送的文件列表就达20M，严重减低的带宽的使用效率以及同步效率；更为要紧的是，加入inotifywait在5s内监控到10个小文件发生变化，便会触发10个rsync同步操作，结果就是真正需要传输的才2-3M的文件，比对的文件列表就达200M。使用这两个组合的好处在于，它们都是最基本的软件，可以通过不同选项做到很精确的控制，比如排除同步的目录，同步多个模块或同步到多个主机。 搭建过程参考Linux下同步工具inotify+rsync使用详解或这里。 1.2 sersync后来听同事说sersync这么个工具可以提高同步的性能，也解决了同步大文件时出现异常的问题，所以就尝试了一下。sersync是国内的一个开发者开源出来的，使用c++编写，采用多线程的方式进行同步，失败后还有重传机制，对临时文件过滤，自带crontab定时同步功能。网上看到有人说性能还不错，说一下我的观点： 国产开源，文档不是很全，在2011年之后就没更新了（googlecode都要快关闭了，其实可以转交其他人维护），网上关于它的使用和讨论都止于10年了 采用xml配置文件的方式，可读性比较好，但是有些原生的有些功能没有实现就没法使用了 无法实现多目录同步，只能通过多个配置文件启动多个进程 文件排除功能太弱。这个要看需求，不是每个人都需要排除子目录。而对于我的环境中，这个功能很重要，而且排除的规则较多 虽然提供插件的功能，但很鸡肋，因为软件本身没有持续更新，也没有看到贡献有其它插件出现（可能是我知识面不够，还用不到里面的refreshCDN plugin）。 虽然不懂c++，但大致看了下源码FileSynchronize，拼接rsync命令大概在273行左右，最后一个函数就是排除选项，简单一点可以将--exclude=改成--eclude-from来灵活控制。有机会再改吧。 另外，在作者的文章Sersync服务器同步程序 项目简介与设计框架评论中，说能解决上面rsync + inotify中所描述的问题。阅读了下源码，这个应该是没有解决，因为在拼接rsync命令时，后面的目的地址始终是针对module的，只要执行rsync命令，就会对整个目录进行遍历，发送要比对的文件列表，然后再发送变化的文件。sersync只是减少了监听的事件，减少了rsync的次数——这已经是很大的改进，但每次rsync没办法改变。（如有其它看法可与我讨论） 其实我们也不能要求每一个软件功能都十分健全，关键是看能否满足我们当下的特定的需求。所谓好的架构不是设计出来的，而是进化来的。目前使用sersync2没什么问题，而且看了它的设计思路应该是比较科学的，特别是过滤队列的设计。双向同步看起来也是可以实现。 1.3 lsyncd废话说这么多，本文就是介绍它了。有些博客说lsyncd是谷歌开源的，实际不是了，只是托管在了googlecode上而已，幸运的是已经迁移到github了：https://github.com/axkibe/lsyncd。 Lysncd 实际上是lua语言封装了 inotify 和 rsync 工具，采用了 Linux 内核（2.6.13 及以后）里的 inotify 触发机制，然后通过rsync去差异同步，达到实时的效果。我认为它最令人称道的特性是，完美解决了inotify + rsync海量文件同步带来的文件频繁发送文件列表的问题 —— 通过时间延迟或累计触发事件次数实现。另外，它的配置方式很简单，lua本身就是一种配置语言，可读性非常强。lsyncd也有多种工作模式可以选择，本地目录cp，本地目录rsync，远程目录rsyncssh。 实现简单高效的本地目录同步备份（网络存储挂载也当作本地目录），一个命令搞定。 2. 使用 lsyncd 本地目录实时备份这一节实现的功能是，本地目录source实时同步到另一个目录target，而在source下有大量的文件，并且有部分目录和临时文件不需要同步。 2.1 安装lsyncd安装lsyncd极为简单，已经收录在ubuntu的官方镜像源里，直接通过apt-get install lsyncd就可以。在Redhat系（我的环境是CentOS 6.2 x86_64 ），可以手动去下载lsyncd-2.1.5-6.fc21.x86_64.rpm，但首先你得安装两个依赖yum install lua lua-devel。也可以通过在线安装，需要epel-release扩展包： 12# rpm -ivh http://dl.fedoraproject.org/pub/epel/6/x86_64/epel-release-6-8.noarch.rpm# yum install lsyncd 源码编译安装从源码编译安装可以使用最新版的lsyncd程序，但必须要相应的依赖库文件和编译工具：yum install lua lua-devel asciidoc cmake。 从googlecode lsyncd上下载的lsyncd-2.1.5.tar.gz，直接./configure、make &amp;&amp; make install就可以了。 从github上下载lsyncd-master.zip的2.1.5版本使用的是 cmake 编译工具，无法./configure： 1234# uzip lsyncd-master.zip# cd lsyncd-master# cmake -DCMAKE_INSTALL_PREFIX=/usr/local/lsyncd-2.1.5# make &amp;&amp; make install 我这个版本编译时有个小bug，如果按照INSTALL在build目录中make，会提示： 123456[100%] Generating doc/lsyncd.1Updating the manpagea2x: failed: source file not found: doc/lsyncd.1.txtmake[2]: *** [doc/lsyncd.1] Error 1make[1]: *** [CMakeFiles/manpage.dir/all] Error 2make: *** [all] Error 2 解决办法是要么直接在解压目录下cmake，不要mkdir build，要么在CMakeList.txt中搜索doc字符串，在前面加上${PROJECT_SOURCE_DIR}。 2.2 lsyncd.conf下面都是在编译安装的情况下操作。 2.2.1 lsyncd同步配置1234567891011121314151617181920212223# cd /usr/local/lsyncd-2.1.5# mkdir etc var# vi etc/lsyncd.confsettings &#123; logfile =&quot;/usr/local/lsyncd-2.1.5/var/lsyncd.log&quot;, statusFile =&quot;/usr/local/lsyncd-2.1.5/var/lsyncd.status&quot;, inotifyMode = &quot;CloseWrite&quot;, maxProcesses = 7, -- nodaemon =true, &#125;sync &#123; default.rsync, source = &quot;/tmp/src&quot;, target = &quot;/tmp/dest&quot;, -- excludeFrom = &quot;/etc/rsyncd.d/rsync_exclude.lst&quot;, rsync = &#123; binary = &quot;/usr/bin/rsync&quot;, archive = true, compress = true, verbose = true &#125; &#125; 到这启动 lsycnd 就可以完成实时同步了，默认的许多参数可以满足绝大部分需求，非常简单。 2.2.2 lsyncd.conf配置选项说明settings里面是全局设置，--开头表示注释，下面是几个常用选项说明： logfile定义日志文件 stausFile定义状态文件 nodaemon=true表示不启用守护模式，默认 statusInterval将lsyncd的状态写入上面的statusFile的间隔，默认10秒 inotifyMode指定inotify监控的事件，默认是CloseWrite，还可以是Modify或CloseWrite or Modify maxProcesses同步进程的最大个数。假如同时有20个文件需要同步，而maxProcesses = 8，则最大能看到有8个rysnc进程 maxDelays累计到多少所监控的事件激活一次同步，即使后面的delay延迟时间还未到 sync里面是定义同步参数，可以继续使用maxDelays来重写settings的全局变量。一般第一个参数指定lsyncd以什么模式运行：rsync、rsyncssh、direct三种模式： default.rsync：本地目录间同步，使用rsync，也可以达到使用ssh形式的远程rsync效果，或daemon方式连接远程rsyncd进程；default.direct：本地目录间同步，使用cp、rm等命令完成差异文件备份；default.rsyncssh：同步到远程主机目录，rsync的ssh模式，需要使用key来认证 source同步的源目录，使用绝对路径。 target定义目的地址.对应不同的模式有几种写法：/tmp/dest：本地目录同步，可用于direct和rsync模式172.29.88.223:/tmp/dest：同步到远程服务器目录，可用于rsync和rsyncssh模式，拼接的命令类似于/usr/bin/rsync -ltsd --delete --include-from=- --exclude=* SOURCE TARGET，剩下的就是rsync的内容了，比如指定username，免密码同步172.29.88.223::module：同步到远程服务器目录，用于rsync模式三种模式的示例会在后面给出。 init这是一个优化选项，当init = false，只同步进程启动以后发生改动事件的文件，原有的目录即使有差异也不会同步。默认是true delay累计事件，等待rsync同步延时时间，默认15秒（最大累计到1000个不可合并的事件）。也就是15s内监控目录下发生的改动，会累积到一次rsync同步，避免过于频繁的同步。（可合并的意思是，15s内两次修改了同一文件，最后只同步最新的文件） excludeFrom排除选项，后面指定排除的列表文件，如excludeFrom = &quot;/etc/lsyncd.exclude&quot;，如果是简单的排除，可以使用exclude = LIST。这里的排除规则写法与原生rsync有点不同，更为简单： 监控路径里的任何部分匹配到一个文本，都会被排除，例如/bin/foo/bar可以匹配规则foo 如果规则以斜线/开头，则从头开始要匹配全部 如果规则以/结尾，则要匹配监控路径的末尾 ?匹配任何字符，但不包括/ *匹配0或多个字符，但不包括/ **匹配0或多个字符，可以是/ delete为了保持target与souce完全同步，Lsyncd默认会delete = true来允许同步删除。它除了false，还有startup、running值，请参考Lsyncd 2.1.x ‖ Layer 4 Config ‖ Default Behavior。 rsync（提示一下，delete和exclude本来都是rsync的选项，上面是配置在sync中的，我想这样做的原因是为了减少rsync的开销） bwlimit限速，单位kb/s，与rsync相同（这么重要的选项在文档里竟然没有标出） compress压缩传输默认为true。在带宽与cpu负载之间权衡，本地目录同步可以考虑把它设为false perms默认保留文件权限。 其它rsync的选项 其它还有rsyncssh模式独有的配置项，如host、targetdir、rsync_path、password_file，见后文示例。rsyncOps={&quot;-avz&quot;,&quot;--delete&quot;}这样的写法在2.1.*版本已经不支持。 lsyncd.conf可以有多个sync，各自的source，各自的target，各自的模式，互不影响。 2.3 启动lsyncd使用命令加载配置文件，启动守护进程，自动同步目录操作。 1lsyncd -log Exec /usr/local/lsyncd-2.1.5/etc/lsyncd.conf 2.4 lsyncd.conf其它模式示例以下配置本人都已经过验证可行，必须根据实际需要裁剪配置： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091settings &#123; logfile =&quot;/usr/local/lsyncd-2.1.5/var/lsyncd.log&quot;, statusFile =&quot;/usr/local/lsyncd-2.1.5/var/lsyncd.status&quot;, inotifyMode = &quot;CloseWrite&quot;, maxProcesses = 8, &#125;-- I. 本地目录同步，direct：cp/rm/mv。 适用：500+万文件，变动不大sync &#123; default.direct, source = &quot;/tmp/src&quot;, target = &quot;/tmp/dest&quot;, delay = 1 maxProcesses = 1 &#125;-- II. 本地目录同步，rsync模式：rsyncsync &#123; default.rsync, source = &quot;/tmp/src&quot;, target = &quot;/tmp/dest1&quot;, excludeFrom = &quot;/etc/rsyncd.d/rsync_exclude.lst&quot;, rsync = &#123; binary = &quot;/usr/bin/rsync&quot;, archive = true, compress = true, bwlimit = 2000 &#125; &#125;-- III. 远程目录同步，rsync模式 + rsyncd daemonsync &#123; default.rsync, source = &quot;/tmp/src&quot;, target = &quot;syncuser@172.29.88.223::module1&quot;, delete=&quot;running&quot;, exclude = &#123; &quot;.*&quot;, &quot;.tmp&quot; &#125;, delay = 30, init = false, rsync = &#123; binary = &quot;/usr/bin/rsync&quot;, archive = true, compress = true, verbose = true, password_file = &quot;/etc/rsyncd.d/rsync.pwd&quot;, _extra = &#123;&quot;--bwlimit=200&quot;&#125; &#125; &#125;-- IV. 远程目录同步，rsync模式 + ssh shellsync &#123; default.rsync, source = &quot;/tmp/src&quot;, target = &quot;172.29.88.223:/tmp/dest&quot;, -- target = &quot;root@172.29.88.223:/remote/dest&quot;, -- 上面target，注意如果是普通用户，必须拥有写权限 maxDelays = 5, delay = 30, -- init = true, rsync = &#123; binary = &quot;/usr/bin/rsync&quot;, archive = true, compress = true, bwlimit = 2000 -- rsh = &quot;/usr/bin/ssh -p 22 -o StrictHostKeyChecking=no&quot; -- 如果要指定其它端口，请用上面的rsh &#125; &#125;-- V. 远程目录同步，rsync模式 + rsyncssh，效果与上面相同sync &#123; default.rsyncssh, source = &quot;/tmp/src2&quot;, host = &quot;172.29.88.223&quot;, targetdir = &quot;/remote/dir&quot;, excludeFrom = &quot;/etc/rsyncd.d/rsync_exclude.lst&quot;, -- maxDelays = 5, delay = 0, -- init = false, rsync = &#123; binary = &quot;/usr/bin/rsync&quot;, archive = true, compress = true, verbose = true, _extra = &#123;&quot;--bwlimit=2000&quot;&#125;, &#125;, ssh = &#123; port = 1234 &#125; &#125; 上面的内容几乎涵盖了所有同步的模式，其中第III个要求像rsync一样配置rsyncd服务端，见本文开头。第IV、V配置ssh方式同步，达到的效果相同，但实际同步时你会发现每次同步都会提示输入ssh的密码，可以通过以下方法解决： 在远端被同步的服务器上开启ssh无密码登录，请注意用户身份： 1234user$ ssh-keygen -t rsa一路回车...user$ cd ~/.sshuser$ cat id_rsa.pub &gt;&gt; authorized_keys 把id_rsa私钥拷贝到执行lsyncd的机器上 123user$ chmod 600 ~/.ssh/id_rsa测试能否无密码登录user$ ssh user@172.29.88.223 3. lsyncd的其它功能lsyncd的功能不仅仅是同步，官方手册Lsyncd 2.1.x ‖ Layer 2 Config ‖ Advanced onAction高级功能提到，还可以监控某个目录下的文件，根据触发的事件自己定义要执行的命令，example是监控某个某个目录，只要是有jpg、gif、png格式的文件参数，就把它们转成pdf，然后同步到另一个目录。正好在我运维的一个项目中有这个需求，现在都是在java代码里转换，还容易出现异常，通过lsyncd可以代替这样的功能。但，门槛在于要会一点点lua语言（根据官方example还是可以写出来）。 另外偶然想到个问题，同时设置了maxDelays和delay，当监控目录一直没有文件变化了，也会发生同步操作，虽然没有可rsync的文件。 TO-DO： 其它同步工具：csync2，clsync，btsync，drdb 。 lsyncd双向同步：GlusterFS 参考 Lsyncd21Manual（本文很大一部分翻译自官网手册） 使用lsyncd配置数据库备份多异地同步 如何实时同步大量小文件 Lsyncd 测试远程、本地目录自动同步]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>rsync</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Cenos7Yun安装Python3]]></title>
    <url>%2F2019%2F01%2F25%2FCentos7Yun%E5%AE%89%E8%A3%85Python3%2F</url>
    <content type="text"><![CDATA[1.安装EPEL和IUS软件源yum install epel-release -y yum install https://centos7.iuscommunity.org/ius-release.rpm -y 2.安装Python3.6yum install python36u -y 3.创建python3连接符ln -s /bin/python3.6 /bin/python3 4.安装pip3yum install python36u-pip -y 5.创建pip3链接符ln -s /bin/pip3.6 /bin/pip3]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
</search>
